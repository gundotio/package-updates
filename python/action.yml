name: Python updates

inputs:
  title:
    default: Package updates [python]
  branch:
    description: The pull request branch name.
    default: package-updates/python
  commit:
    description: The message to use when committing changes.
  post-update:
    description: Steps to perform after updating the dependencies.
  labels:
    description: A comma or newline separated list of labels.
    default: |
      dependencies
      python
  assignees:
    description: A comma or newline separated list of assignees (GitHub usernames).
  reviewers:
    description: A comma or newline separated list of reviewers (GitHub usernames) to request a review from.

outputs:
  package-changes:
    description: The package changes in the update.
    value: ${{ steps.update.outputs.diff }}
  pull-request-number:
    description: The pull request number.
    value: ${{ steps.pull-request.outputs.pull-request-number }}
  pull-request-url:
    description: The URL of the pull request.
    value: ${{ steps.pull-request.outputs.pull-request-url }}
  pull-request-operation:
    description: The pull request operation performed by the action, `created`, `updated` or `closed`.
    value: ${{ steps.pull-request.outputs.pull-request-operation }}
  pull-request-head-sha:
    description: The commit SHA of the pull request branch.
    value: ${{ steps.pull-request.outputs.pull-request-head-sha }}

runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v4

    - id: update
      run: |
        if [ -f Pipfile.lock ]; then
          cp Pipfile.lock{,.bak}
          pipx install pipenv
          pipenv update
          echo 'diff<<EOF' >> $GITHUB_OUTPUT
          python ${{ github.action_path }}/pipenvdiff.py Pipfile.lock{.bak,} >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          rm Pipfile.lock.bak
        elif [ -f poetry.lock ]; then
          pipx install poetry
          poetry install
          echo 'diff<<EOF' >> $GITHUB_OUTPUT
          poetry update | grep • | sed 's/  • //g' | \
            sed -E 's/Installing (.*) \(.*\)/\1 added/g' | \
            sed -E 's/Removing (.*) \(.*\)/\1 removed/g' | \
            sed -E 's/Updating (.*) \((.*)\)/\1 \2/g' | \
            sort >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
        fi
      shell: bash

    - if: inputs.post-update
      run: ${{ inputs.post-update }}
      shell: bash

    - id: pull-request
      uses: peter-evans/create-pull-request@v5
      with:
        title: ${{ inputs.title }}
        body: |
          ```
          ${{ steps.update.outputs.diff }}
          ```
        author: GitHub <noreply@github.com>
        branch: ${{ inputs.branch }}
        committer: GitHub <noreply@github.com>
        commit-message: |
          ${{ inputs.commit || inputs.title }}

          ${{ steps.update.outputs.diff }}
        delete-branch: true
        assignees: ${{ inputs.assignees }}
        labels: ${{ inputs.labels }}
        reviewers: ${{ inputs.reviewers }}
